Assignment6 ReportIn this assignment, I developed a simple event-driven architecture for the clinical system.
For Billing Department.Entities
For billing, a TreatmentBilling entity has a one-to-one relationship with a Treatment entity, and recordsthe cost of that treatment.
Source Code Path :/ClinicDomainModel/src/edu/stevens/cs/cs548/clinic/billing/domain/TreatmentBilling.java@Entitypublic class TreatmentBilling implements Serializable {private static final long serialVersionUID = 1L;public TreatmentBilling() {super();}@Id@GeneratedValueprivate long id;private float amount;@OneToOneprivate Treatment treatment;}Events.In the ClinicService, addDrugTreatment() publish a notification of treatment on the queue.Source Code Path : /ClinicService/ejbModule/stevens/cs/cs548/clinic/service/ejb/PatientBean.java@Overridepublic void addDrugTreatment(long pid, long npi, String drug, int dosage){Patient p = clinic.getPatientEntity(pid);long tid = p.addDrugTreatment(drug, dosage);//// Publish a notification of treatment on the queue.//Connection treatmentConn = null;try {treatmentConn = treatmentConnFactory.createConnection();Session session = treatmentConn.createSession(true, Session.AUTO_ACKNOWLEDGE);MessageProducer producer = session.createProducer(treatmentTopic);Treatment treatment = new Treatment();DrugTreatmentType drugTreatment = new DrugTreatmentType();drugTreatment.setDosage(dosage);drugTreatment.setDrugName(drug);treatment.setDrug(drugTreatment);treatment.setTid((int)tid);ObjectMessage message = session.createObjectMessage();message.setObject(treatment);producer.send(message);} catch (JMSException e) {logger.severe("JMS Error: " + e);} finally {try{if(treatmentConn != null)treatmentConn.close();}catch(JMSException e){logger.severe("Error closing JMS connection: " + e);}}}After the message is sent to the queue successfully, the TreatmentListener(consumer) will receive themessage, and produce it.Source Code Path :/ClinicService/ejbModule/stevens/cs/cs548/clinic/billing/service/TreatmentListener.java@MessageDriven(activationConfig = { @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Topic") },mappedName = "jms/clinic/Treatment")public class TreatmentListener implements MessageListener {/*** Default constructor.*/public TreatmentListener() {// TODO Auto-generated constructor stub}@PersistenceContext(unitName="ClinicDomain")private EntityManager em;/*** @see MessageListener#onMessage(Message)* When a new treatment is added to the treatments for a patient,* the notification is received.*/public void onMessage(Message message) {ObjectMessage objMessage = (ObjectMessage)message;try {Treatment treatment = (Treatment)objMessage.getObject();TreatmentBillingDAO tbd = new TreatmentBillingDAO(em);Random generator = new Random();float amount = generator.nextFloat()*500;tbd.addBillingInfo(treatment.getTid(), amount);} catch (JMSException e) {// TODO Auto-generated catch blocke.printStackTrace();}}}ResourcesFor the testing purposes, populate the drug table with some set of drug entities.Source Code Path :/ClinicREST/src/edu/stevens/cs/cs548/clinic/billing/rest/resource/TreatmentBillingResource.java@GET@Path("{treatmentId}")@Produces("application/xml")public TreatmentBilling getPatient(@PathParam("treatmentId") String treatmentId){long tid = Long.parseLong(treatmentId);TreatmentBilling tb = treatmentBilling.getTreatmentBilling(tid);return tb;}For Research Department.Entities.For Research, Drug entity represents a particular drug, and there is a one-to-many relationship betweenDrug and DrugTreatment entities.Source Code Path : /ClinicDomainModel/src/edu/stevens/cs/cs548/clinic/research/domain/Drug.java@Entitypublic class Drug implements Serializable {private static final long serialVersionUID = 1L;public Drug() {super();}@Id@GeneratedValueprivate long id;private String name;@OneToManyprivate Set<DrugTreatment> treatments;}Events.After the producer sent the message to the queue, the Research Department will receive the messageand produce it by onMessage().Source Code Path :/ClinicService/ejbModule/stevens/cs/cs548/clinic/research/service/TreatmentListener.java@MessageDriven(activationConfig = { @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Topic") },mappedName = "jms/clinic/Treatment")public class TreatmentListener implements MessageListener {/*** Default constructor.*/public TreatmentListener() {// TODO Auto-generated constructor stub}@PersistenceContext(unitName="ClinicDomain")private EntityManager em;/*** @see MessageListener#onMessage(Message)*/public void onMessage(Message message) {ObjectMessage objMessage = (ObjectMessage)message;try {Treatment treatment = (Treatment)objMessage.getObject();DrugResearchDAO trd = new DrugResearchDAO(em);trd.addResearchInfo(treatment.getTid(), treatment.getDrug().getDrugName());} catch (JMSException e) {// TODO Auto-generated catch blocke.printStackTrace();}}}Resources.For test purposes, populate the Drug table with some set of drug entities.Source Code Path :/ClinicREST/src/edu/stevens/cs/cs548/clinic/research/rest/resource/DrugTreatmentResource.java@GET@Path("{drugName}")@Produces("application/xml")public List<DrugTreatment> getPatient(@PathParam("drugName") String drugName){List<DrugTreatment> treatments = drugTreatment.getTreatments(drugName);return treatments;}
